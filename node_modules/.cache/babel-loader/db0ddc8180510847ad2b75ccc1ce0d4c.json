{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\shivam bale\\\\bootstrap-rfs-app\\\\src\\\\components\\\\Layout\\\\Comment.js\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\nimport classes from './Comment.module.css';\nimport Aux from '../../hoc/Auxiliary';\nimport Comments from './Comments';\nimport { MDBInput } from 'mdbreact';\nimport Cookies from 'js-cookie';\n\nvar jwt = require('jsonwebtoken');\n\nvar mainurl = 'https://gentle-retreat-77560.herokuapp.com'; //const mainurl = 'http://localhost:5000';//\n\nvar Comment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Comment, _Component);\n\n  function Comment() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Comment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Comment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      collapseID: \"\",\n      records: [],\n      comments: [],\n      users: [],\n      ideaid: undefined,\n      commentbox: '',\n      email: ''\n    };\n\n    _this.handelchange = function (event) {\n      _this.setState({\n        commentbox: event.target.value\n      });\n    };\n\n    _this.postComment = function () {\n      var token = Cookies.get('jwttoken');\n      var decodedtoken;\n\n      try {\n        decodedtoken = jwt.verify(token, 'heyphil123');\n      } catch (err) {\n        console.log(err);\n      }\n\n      if (decodedtoken) {\n        _this.state.email = decodedtoken.email;\n        var ideaid = _this.state.ideaid;\n        var formdata = new FormData();\n        formdata.append('comment', _this.state.commentbox);\n        formdata.append('email', _this.state.email);\n        fetch(mainurl + '/comments/' + ideaid, {\n          method: 'POST',\n          body: formdata\n        }).then(function (res) {\n          return res.json();\n        }).then(function (resdata) {\n          fetch(mainurl + '/comments/' + _this.state.ideaid).then(function (res) {\n            return res.json();\n          }).then(function (resdata) {\n            _this.setState({\n              comments: resdata.comments || [],\n              users: resdata.users || [],\n              commentbox: ''\n            });\n          }).catch(function (err) {\n            console.log(err);\n          });\n        }).catch(function (err) {\n          console.log(err);\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Comment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var id = this.props.location.pathname.toString();\n      id = id.split('/')[2];\n      this.setState({\n        ideaid: id\n      });\n      fetch(mainurl + '/comments/' + id).then(function (res) {\n        return res.json();\n      }).then(function (resdata) {\n        _this2.setState({\n          comments: resdata.comments || [],\n          users: resdata.users || []\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var comments = this.state.comments.map(function (comment, index) {\n        return React.createElement(Comments, {\n          name: _this3.state.users[index],\n          comment: comment,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      });\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: classes.lab,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Comments\"), React.createElement(\"div\", {\n        class: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(MDBInput, {\n        type: \"textarea\",\n        rows: \"5\",\n        id: \"exampleFormControlTextarea1\",\n        name: \"problem-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(MDBContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(MDBRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(MDBCol, {\n        md: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: classes.head,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"you are replying to \", this.props.email), React.createElement(MDBInput, {\n        type: \"textarea\",\n        rows: \"5\",\n        id: \"exampleFormControlTextarea1\",\n        name: \"comment\",\n        onChange: this.handelchange,\n        value: this.state.commentbox,\n        background: \"primary\",\n        placeholder: \"write your comment\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: classes.btn,\n        onClick: this.postComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"post\")))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), comments);\n    }\n  }]);\n\n  return Comment;\n}(Component);\n\n;\nexport default Comment;","map":{"version":3,"sources":["C:/Users/shivam bale/bootstrap-rfs-app/src/components/Layout/Comment.js"],"names":["React","Component","MDBContainer","MDBRow","MDBCol","classes","Aux","Comments","MDBInput","Cookies","jwt","require","mainurl","Comment","state","collapseID","records","comments","users","ideaid","undefined","commentbox","email","handelchange","event","setState","target","value","postComment","token","get","decodedtoken","verify","err","console","log","formdata","FormData","append","fetch","method","body","then","res","json","resdata","catch","id","props","location","pathname","toString","split","map","comment","index","lab","head","btn"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\nimport classes from './Comment.module.css'\r\nimport Aux from '../../hoc/Auxiliary';\r\nimport Comments from './Comments'\r\nimport { MDBInput } from 'mdbreact';\r\nimport Cookies from 'js-cookie';\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\nconst mainurl = 'https://gentle-retreat-77560.herokuapp.com';\r\n//const mainurl = 'http://localhost:5000';//\r\n\r\nclass Comment extends Component {\r\n  state = {\r\n    collapseID: \"\",\r\n    records: [],\r\n    comments: [],\r\n    users: [],\r\n    ideaid: undefined,\r\n    commentbox: '',\r\n    email: ''\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    var id = this.props.location.pathname.toString();\r\n    id = id.split('/')[2];\r\n    this.setState({\r\n      ideaid: id\r\n    });\r\n\r\n    fetch(mainurl + '/comments/' + id)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(resdata => {\r\n        this.setState({\r\n          comments: resdata.comments || [],\r\n          users: resdata.users || []\r\n        });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n\r\n  }\r\n\r\n  handelchange = (event) => {\r\n    this.setState({\r\n      commentbox: event.target.value\r\n    });\r\n  }\r\n\r\n  postComment = () => {\r\n    const token = Cookies.get('jwttoken');\r\n    var decodedtoken;\r\n    try {\r\n      decodedtoken = jwt.verify(token, 'heyphil123');\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    if (decodedtoken) {\r\n      this.state.email = decodedtoken.email;\r\n      const ideaid = this.state.ideaid;\r\n      var formdata = new FormData();\r\n      formdata.append('comment', this.state.commentbox);\r\n      formdata.append('email', this.state.email);\r\n\r\n      fetch(mainurl + '/comments/' + ideaid, {\r\n        method: 'POST',\r\n        body: formdata,\r\n      })\r\n        .then(res => {\r\n          return res.json();\r\n        })\r\n        .then(resdata => {\r\n          fetch(mainurl + '/comments/' + this.state.ideaid)\r\n            .then(res => {\r\n              return res.json();\r\n            })\r\n            .then(resdata => {\r\n              this.setState({\r\n                comments: resdata.comments || [],\r\n                users: resdata.users || [],\r\n                commentbox: ''\r\n              });\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            });\r\n\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const comments = this.state.comments.map((comment, index) => {\r\n      return <Comments\r\n        name={this.state.users[index]}\r\n        comment={comment}\r\n      />\r\n    });\r\n    return (\r\n      <Aux>\r\n        <h3 className={classes.lab}>Comments</h3>\r\n        <div class=\"form-group\">\r\n        <MDBInput \r\n                  type=\"textarea\" \r\n                  rows=\"5\"\r\n                  id=\"exampleFormControlTextarea1\"  \r\n                  name=\"problem-box\"\r\n                  />\r\n        </div>\r\n       \r\n        <MDBContainer>\r\n          <MDBRow>\r\n            <MDBCol md=\"6\">\r\n              <div class=\"form-group\">\r\n                <p className={classes.head}>you are replying to {this.props.email}</p>\r\n              <MDBInput \r\n                  type=\"textarea\" \r\n                  rows=\"5\"\r\n                  id=\"exampleFormControlTextarea1\"  \r\n                  name=\"comment\"\r\n                  onChange={this.handelchange}\r\n                  value={this.state.commentbox}\r\n                  background=\"primary\"\r\n                  placeholder=\"write your comment\"\r\n                />\r\n                <button className={classes.btn} onClick={this.postComment}><b>post</b></button>\r\n              </div>\r\n            </MDBCol>\r\n          </MDBRow>\r\n        </MDBContainer>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />     \r\n        {comments}\r\n      </Aux>\r\n    )\r\n  }\r\n};\r\n\r\n\r\nexport default Comment;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}